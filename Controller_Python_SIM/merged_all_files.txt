
=== File: /c/Users/User/Documents/Balance_Rover/Controller/balance_rover.xml ===
<mujoco model="balance_rover">
  <compiler inertiafromgeom="true"/>

  <default>
    <joint   armature="0" damping="1"/>
    <geom    friction="1 0.1 0.1"/>
    <motor   ctrlrange="-5 5"/>
  </default>

  <option gravity="0 0 -9.81" integrator="RK4" timestep="0.0005"/>

  <worldbody>
    <!-- floor plane -->
    <geom type="plane" pos="0 0 0" size="5 5 0.1"
          contype="1" conaffinity="1"
          friction="1 0.1 0.1"
          rgba="0.8 0.8 0.8 1"/>

    <body name="base" pos="0 0 0.02">
      <joint name="slide" type="slide" axis="1 0 0" range="-5 5"/>
      <inertial pos="0 0 0" mass="1.0" diaginertia="0.001 0.001 0.001"/>

      <!-- Left wheel -->
      <body name="wheel_L" pos="0 0.05 0.02">
        <joint name="L_spin" type="hinge" axis="0 1 0" limited="false"/>
        <inertial pos="0 0 0" mass="0.3" diaginertia="0.0001 0.0001 0.0001"/>
        <geom type="cylinder" size="0.06 0.005"
              quat="0.7071 0.7071 0 0"
              contype="1" conaffinity="1"
              friction="1 0.1 0.1"
              rgba="0.2 0.2 0.2 1"/>
      </body>

      <!-- Right wheel -->
      <body name="wheel_R" pos="0 -0.05 0.02">
        <joint name="R_spin" type="hinge" axis="0 1 0" limited="false"/>
        <inertial pos="0 0 0" mass="0.3" diaginertia="0.0001 0.0001 0.0001"/>
        <geom type="cylinder" size="0.06 0.005"
              quat="0.7071 0.7071 0 0"
              contype="1" conaffinity="1"
              friction="1 0.1 0.1"
              rgba="0.2 0.2 0.2 1"/>
      </body>

      <!-- Pendulum pole -->
      <body name="pole" pos="0 0 0.04">
        <joint name="hinge" type="hinge" axis="0 1 0" damping="0.0" limited="false"/>
        <geom type="capsule" fromto="0 0 0  0 0 0.5" size="0.02" rgba="0.8 0.3 0.3 1"/>

        <!-- site at bottom of the pole for the IMU -->
        <site name="imu_site" pos="0 0 0" size="0.01" rgba="0 1 0 0.5"/>
      </body>
    </body>
  </worldbody>

  <!-- corrected sensor block -->
  <sensor>
    <accelerometer name="pole_accel" site="imu_site"/>
    <gyro          name="pole_gyro"  site="imu_site"/>
  </sensor>

  <actuator>
    <motor joint="L_spin" name="u_L" ctrlrange="-3 3" gear="100"/>
    <motor joint="R_spin" name="u_R" ctrlrange="-3 3" gear="100"/>
  </actuator>
</mujoco>

--------------------------------------

=== File: /c/Users/User/Documents/Balance_Rover/Controller/balance_rover_env.py ===
#!/usr/bin/env python3
import sys, os
from pathlib import Path
import numpy as np
import mujoco, mujoco.viewer
import tkinter as tk
from collections import deque
from ctypes import CDLL, c_void_p, c_float
import numpy.ctypeslib as ctl

# 1) Load & bind C++ controller
script_dir = Path(__file__).parent.resolve()
dll_path   = script_dir/"controller_lib.dll"
if not dll_path.exists():
    sys.exit(f"Error: controller_lib.dll not found in {script_dir}")

# Windows DLL search paths
mujoco_lib = os.getenv('MUJOCO_LIB', r'C:\mujoco\mujoco210\bin')
mingw_bin  = r'C:\msys64\mingw64\bin'
if os.name=="nt" and hasattr(os, 'add_dll_directory'):
    os.add_dll_directory(str(script_dir))
    if os.path.isdir(mujoco_lib): os.add_dll_directory(mujoco_lib)
    if os.path.isdir(mingw_bin):  os.add_dll_directory(mingw_bin)
else:
    os.environ['PATH'] += os.pathsep + str(script_dir)

lib = CDLL(str(dll_path))
lib.make_controller.restype = c_void_p
lib.free_controller.argtypes = [c_void_p]

# Bind update/controller + manual callbacks
float_arr = ctl.ndpointer(dtype=np.float32, flags="C_CONTIGUOUS")
lib.update_controller.argtypes = [c_void_p, float_arr, float_arr, float_arr, float_arr]
lib.update_controller.restype  = c_float

for fn in ("on_fwd_press","on_fwd_release","on_bwd_press","on_bwd_release"):
    f = getattr(lib, fn)
    f.argtypes = [c_void_p]
    f.restype  = None

# Bind all setters
lib.set_Kp_ang.argtypes       = [c_float]
lib.set_Ki_ang.argtypes       = [c_float]
lib.set_Kd_ang.argtypes       = [c_float]
lib.set_Kp_vel.argtypes       = [c_float]
lib.set_Ki_vel.argtypes       = [c_float]
lib.set_Kd_vel.argtypes       = [c_float]
lib.set_drive_gain.argtypes   = [c_float]
lib.set_drive_ramp.argtypes   = [c_float]
lib.set_smooth_tau.argtypes   = [c_float]
lib.set_overshoot_bias.argtypes = [c_float]
lib.set_overshoot_rate.argtypes = [c_float]
lib.set_drift_gain.argtypes   = [c_float]
lib.set_drift_window.argtypes = [c_float]

# 2) Constants
DRIFT_WINDOW = 5.0

# 3) Env
class BalanceRoverEnv:
    def __init__(self):
        xml = script_dir/"balance_rover.xml"
        if not xml.exists():
            sys.exit("Error: XML not found")
        self.model = mujoco.MjModel.from_xml_path(str(xml))
        self.data  = mujoco.MjData(self.model)
        self.dt    = self.model.opt.timestep

        # sensors & slide joint
        self.acc_id  = mujoco.mj_name2id(self.model,mujoco.mjtObj.mjOBJ_SENSOR,"pole_accel")
        self.gyro_id = mujoco.mj_name2id(self.model,mujoco.mjtObj.mjOBJ_SENSOR,"pole_gyro")
        sid = mujoco.mj_name2id(self.model,mujoco.mjtObj.mjOBJ_JOINT,"slide")
        self.slide_dof = self.model.jnt_dofadr[sid]

        self.ctrl = lib.make_controller()
        self.drift_buffer = deque(maxlen=int(DRIFT_WINDOW/self.dt))
        self.initial_angle = 0.0

        self.viewer = mujoco.viewer.launch_passive(self.model,self.data,
                                                   key_callback=lambda *a: None)
        self._build_ui()
        self.respawn()

    def _build_ui(self):
        self.root = tk.Tk()
        self.root.title("Balance Rover - Tune All Params")
        self.root.resizable(False, False)

        params = [
            ("InitAngle (°)", None,            "0.0"),
            ("Kp_ang",        lib.set_Kp_ang,   "30.0"),
            ("Ki_ang",        lib.set_Ki_ang,   "10.0"),
            ("Kd_ang",        lib.set_Kd_ang,    "0.5"),
            ("Kp_vel",        lib.set_Kp_vel,   "20.0"),
            ("Ki_vel",        lib.set_Ki_vel,    "0.5"),
            ("Kd_vel",        lib.set_Kd_vel,    "0.1"),
            ("DriveGain",     lib.set_drive_gain,"0.4"),
            ("DriveRamp",     lib.set_drive_ramp,"0.2"),
            ("SmoothTau",     lib.set_smooth_tau,"4.0"),
            ("OvershootBias", lib.set_overshoot_bias,"0.10"),
            ("OvershootRate", lib.set_overshoot_rate,"0.05"),
            ("DriftGain",     lib.set_drift_gain,"-0.4"),
            ("DriftWindow",   lib.set_drift_window,"5.0"),
        ]
        self.entries = {}
        for i,(name,setter,default) in enumerate(params):
            tk.Label(self.root,text=name).grid(row=i,column=0,sticky="e")
            e = tk.Entry(self.root,width=8); e.insert(0,default)
            e.grid(row=i,column=1,sticky="w")
            self.entries[name] = (e,setter)

        tk.Button(self.root,text="Update Params",command=self._update_params)\
          .grid(row=len(params),column=0,columnspan=2,pady=(5,5))
        tk.Button(self.root,text="Respawn",command=self.respawn)\
          .grid(row=len(params)+1,column=0,columnspan=2,pady=(0,10))

        self.status = tk.Label(self.root,text="",width=40,justify="left")
        self.status.grid(row=len(params)+2,column=0,columnspan=2,pady=(0,10))

        btn_f = tk.Button(self.root,text="Forward",width=10)
        btn_b = tk.Button(self.root,text="Backward",width=10)
        btn_f.grid(row=0,column=2,padx=5,pady=5)
        btn_b.grid(row=1,column=2,padx=5,pady=5)
        btn_f.bind("<ButtonPress-1>", lambda e: lib.on_fwd_press(self.ctrl))
        btn_f.bind("<ButtonRelease-1>",lambda e: lib.on_fwd_release(self.ctrl))
        btn_b.bind("<ButtonPress-1>", lambda e: lib.on_bwd_press(self.ctrl))
        btn_b.bind("<ButtonRelease-1>",lambda e: lib.on_bwd_release(self.ctrl))

    def _update_params(self):
        for name,(entry,setter) in self.entries.items():
            try: val=float(entry.get())
            except: continue
            if name=="InitAngle (°)":
                self.initial_angle = val
            elif setter:
                setter(val)

    def respawn(self):
        mujoco.mj_resetData(self.model,self.data)
        self.data.qpos[:] = 0; self.data.qvel[:] = 0; self.data.ctrl[:] = 0
        hj = mujoco.mj_name2id(self.model,mujoco.mjtObj.mjOBJ_JOINT,"hinge")
        self.data.qpos[self.model.jnt_qposadr[hj]] = np.deg2rad(self.initial_angle)
        mujoco.mj_forward(self.model,self.data)
        lib.free_controller(self.ctrl)
        self.ctrl = lib.make_controller()
        self.drift_buffer.clear()

    def run(self):
        dt_arr = np.array([self.dt],dtype=np.float32)
        while True:
            mujoco.mj_step(self.model,self.data)
            sd    = self.data.sensordata
            accel = np.array(sd[self.acc_id:self.acc_id+3],dtype=np.float32)
            gyro  = np.array(sd[self.gyro_id:self.gyro_id+3],dtype=np.float32)
            slide = np.array([self.data.qvel[self.slide_dof]],dtype=np.float32)

            cmd = float(lib.update_controller(self.ctrl, accel, gyro, slide, dt_arr))

            self.drift_buffer.append(slide[0])
            drift = sum(self.drift_buffer)/len(self.drift_buffer)

            self.data.ctrl[0]=cmd; self.data.ctrl[1]=cmd
            self.status.config(text=(
                f"InitAng= {self.initial_angle:.1f}°\n"
                f"Cmd    = {cmd:.3f}\n"
                f"Drift  = {drift:.4f} m/s"
            ))
            self.viewer.sync(); self.root.update()

    def close(self):
        lib.free_controller(self.ctrl)
        self.viewer.close(); self.root.destroy()

if __name__=="__main__":
    try:
        BalanceRoverEnv().run()
    except tk.TclError:
        pass

--------------------------------------

=== File: /c/Users/User/Documents/Balance_Rover/Controller/controller_lib.cpp ===
#include <cstdint>
#include <cstdlib>
#include <deque>
#include <cmath>
#include <cstring>

extern "C" {

// ————————————————————————————————————————————————————————————————————
// Runtime‑tunable globals (defaults matching your Python PID)
// ————————————————————————————————————————————————————————————————————
static float g_Kp_ang        = 30.0f;
static float g_Ki_ang        = 10.0f;
static float g_Kd_ang        = 0.5f;

static float g_Kp_vel        = 20.0f;
static float g_Ki_vel        = 0.5f;
static float g_Kd_vel        = 0.1f;

static float g_DRIVE_GAIN    = 0.4f;
static float g_DRIVE_RAMP    = 0.2f;
static float g_SMOOTH_TAU    = 4.0f;

static float g_OVERSHOOT_BIAS = 0.10f;
static float g_OVERSHOOT_RATE = 0.05f;

static float g_DRIFT_WINDOW  = 5.0f;
static float g_DRIFT_GAIN    = -0.4f;

// static constexpr things left unchanged:
static constexpr float PI        = 3.14159265358979323846f;
static constexpr float DEAD_BAND = (PI/180.0f) * 0.1f;
static constexpr float DERIV_TAU = 0.02f;

// —————————————————————————————————————————————————————————
// Dual‑loop PID implementation
// —————————————————————————————————————————————————————————
struct DualPID {
    float Kp, Ki, Kd;
    float integral, prev_error, d_filtered;

    DualPID()
     : Kp(g_Kp_ang), Ki(g_Ki_ang), Kd(g_Kd_ang),
       integral(0), prev_error(0), d_filtered(0)
    {}

    void reset() {
        Kp = g_Kp_ang; Ki = g_Ki_ang; Kd = g_Kd_ang;
        integral = prev_error = d_filtered = 0;
    }

    float update(float error, float /*error_dot*/, float dt,
                 float output, float min_u, float max_u)
    {
        if (std::fabs(error) < DEAD_BAND) {
            // no change
        }
        float d_raw = dt > 0 ? (error - prev_error) / dt : 0;
        float alpha = dt / (DERIV_TAU + dt);
        d_filtered += alpha * (d_raw - d_filtered);

        if (output > min_u && output < max_u)
            integral += error * dt;

        float u = Kp * error + Ki * integral + Kd * d_filtered
                + g_OVERSHOOT_BIAS * (error > 0 ? 1.0f : -1.0f);

        float u_sat = std::fmax(min_u, std::fmin(max_u, u));
        prev_error = error;
        return u_sat;
    }
};

// —————————————————————————————————————————————————————————
// RoverController: wraps DualPID + drift/manual drive logic
// —————————————————————————————————————————————————————————
struct RoverController {
    DualPID pid;
    float drive_current;
    float u_smoothed;
    bool manual_active;
    std::deque<float> drift_buffer;

    RoverController()
     : drive_current(0), u_smoothed(0), manual_active(false)
    {}

    void reset() {
        pid.reset();
        drive_current  = 0;
        u_smoothed     = 0;
        manual_active  = false;
        drift_buffer.clear();
    }

    void on_fwd_press()   { manual_active = true;  drive_current += g_DRIVE_GAIN; }
    void on_fwd_release() { manual_active = false; }
    void on_bwd_press()   { manual_active = true;  drive_current -= g_DRIVE_GAIN; }
    void on_bwd_release() { manual_active = false; }

    // Now uses accel_x for drift estimation instead of slide velocity
    float step(float theta, float theta_dot, float accel_x, float dt) {
        // drift buffer with acceleration
        drift_buffer.push_back(accel_x);
        size_t m = size_t(g_DRIFT_WINDOW / dt);
        if (drift_buffer.size() > m) drift_buffer.pop_front();

        float ax_avg = 0;
        for (auto &a : drift_buffer) ax_avg += a;
        ax_avg /= drift_buffer.size();

        if (!manual_active)
            drive_current = -ax_avg * g_DRIFT_GAIN;

        // manual‑drive decay
        if (drive_current != 0) {
            float dec = g_OVERSHOOT_RATE * dt;
            if (std::fabs(drive_current) > dec)
                drive_current -= (drive_current > 0 ? 1 : -1) * dec;
            else
                drive_current = -(drive_current > 0 ? 1 : -1) * (dec - std::fabs(drive_current));
        }

        // PID update (uses angle gains)
        float u_pid = pid.update(theta, theta_dot, dt, u_smoothed, -3e5f, 3e5f);
        float target = u_pid + drive_current;
        u_smoothed += (dt / g_SMOOTH_TAU) * (target - u_smoothed);
        return u_smoothed;
    }
};

static RoverController* ctrl = nullptr;

// —————————————————————————————————————————————————————————
// C API
// —————————————————————————————————————————————————————————
void* make_controller() {
    delete ctrl;
    ctrl = new RoverController();
    return ctrl;
}

void free_controller(void* ptr) {
    delete static_cast<RoverController*>(ptr);
    ctrl = nullptr;
}

/// update_controller:
///   accel:     float[3]
///   gyro:      float[3]
///   slide_vel: float[1] (unused, now accel_x used)
///   dt:        float[1]
float update_controller(void* ptr,
                        float* accel,
                        float* gyro,
                        float* /*slide_vel*/, 
                        float* dt_ptr)
{
    float ax = accel[0], az = accel[2];
    float gy = gyro[1];
    float dt = dt_ptr[0];

    float theta     = std::atan2(-ax, az);
    float theta_dot = gy;

    return static_cast<RoverController*>(ptr)
          ->step(theta, theta_dot, ax, dt);
}

// Manual‑drive
void on_fwd_press(void* ptr)   { ctrl->on_fwd_press(); }
void on_fwd_release(void* ptr) { ctrl->on_fwd_release(); }
void on_bwd_press(void* ptr)   { ctrl->on_bwd_press(); }
void on_bwd_release(void* ptr) { ctrl->on_bwd_release(); }

// Setters
void set_Kp_ang(float v)        { g_Kp_ang = v; }
void set_Ki_ang(float v)        { g_Ki_ang = v; }
void set_Kd_ang(float v)        { g_Kd_ang = v; }

void set_Kp_vel(float v)        { g_Kp_vel = v; }
void set_Ki_vel(float v)        { g_Ki_vel = v; }
void set_Kd_vel(float v)        { g_Kd_vel = v; }

void set_drive_gain(float v)    { g_DRIVE_GAIN = v; }
void set_drive_ramp(float v)    { g_DRIVE_RAMP = v; }
void set_smooth_tau(float v)    { g_SMOOTH_TAU = v; }

void set_overshoot_bias(float v){ g_OVERSHOOT_BIAS = v; }
void set_overshoot_rate(float v){ g_OVERSHOOT_RATE = v; }

void set_drift_gain(float v)    { g_DRIFT_GAIN = v; }
void set_drift_window(float v)  { g_DRIFT_WINDOW = v; }

} // extern "C"

--------------------------------------

=== File: /c/Users/User/Documents/Balance_Rover/Controller/pid_controller.py ===
#!/usr/bin/env python3
"""
Controller logic for BalanceRover:
- Dual-loop PID (angle + velocity)
- Drift/movement handling (automatic drift correction, manual drive, smoothing)
- Anti-windup, derivative filtering, dead-band, bias, rate limits, etc.
"""

import sys
from pathlib import Path
import numpy as np
from collections import deque

# —————————————————————————————————————————————————————————
# INITIAL TUNING PARAMETERS (live-tunable via UI)
# Outer loop (angle) gains
Kp_ang, Ki_ang, Kd_ang = 30.0, 10.0, 0.5
# Inner loop (velocity) gains
Kp_vel, Ki_vel, Kd_vel = 20.0, 0.5, 0.1

DRIVE_GAIN      = 0.4    # N·m per button/key press
DRIVE_RAMP_RATE = 0.2    # N·m per second
SMOOTH_TAU      = 4      # seconds for exp smoothing
FALL_THRESH     = np.pi * 0.9
SIM_DURATION    = 600.0  # seconds

# Dead-band threshold (rad)
DEAD_BAND = np.deg2rad(0.1)
# Derivative filter time constant (s)
DERIV_TAU = 0.02
# Control rate limit (unit/sec) for soft-start
CMD_RATE_LIMIT = 1.0
# Overshoot bias magnitude
OVERSHOOT_BIAS = 0.10

# Drift & manual drive parameters
INITIAL_ANGLE   = 10.0    # deg for respawn routines
OVERSHOOT_RATE  = 0.05    # manual drive decay (N·m per sec)
DRIFT_WINDOW    = 5.0     # seconds
DRIFT_GAIN      = -0.4    # N·m per (m/s) drift
# —————————————————————————————————————————————————————————

class DualPID:
    def __init__(self, Kp, Ki, Kd):
        self.Kp = Kp
        self.Ki = Ki
        self.Kd = Kd
        self.integral = 0.0
        self.prev_error = 0.0
        self.d_filtered = 0.0

    def reset(self):
        self.integral = 0.0
        self.prev_error = 0.0
        self.d_filtered = 0.0

    def update(self, error, measurement_dot, dt, output, output_limits):
        # Dead-band: allow small errors to pass
        if abs(error) < DEAD_BAND:
            pass

        # raw derivative
        d_raw = (error - self.prev_error) / dt if dt > 0 else 0.0
        alpha = dt / (DERIV_TAU + dt)
        self.d_filtered += alpha * (d_raw - self.d_filtered)

        # anti-windup integration
        if output_limits[0] < output < output_limits[1]:
            self.integral += error * dt

        # PID with filtered derivative
        u = self.Kp * error + self.Ki * self.integral + self.Kd * self.d_filtered
        # slight overshoot bias
        u += OVERSHOOT_BIAS * np.sign(error)
        # saturate
        u_sat = np.clip(u, output_limits[0], output_limits[1])
        self.prev_error = error
        return u_sat

class RoverController:
    def __init__(self, timestep):
        # PID for pole balance
        self.pid = DualPID(Kp_ang, Ki_ang, Kd_ang)
        # Manual & drift state
        self.drive_current = 0.0
        self.u_smoothed = 0.0
        self.manual_active = False
        # Drift buffer
        max_len = int(DRIFT_WINDOW / timestep)
        self.drift_buffer = deque(maxlen=max_len)

    def reset(self):
        # Reset controllers and state
        self.pid.reset()
        self.drive_current = 0.0
        self.u_smoothed = 0.0
        self.manual_active = False
        self.drift_buffer.clear()

    def on_fwd_press(self):
        self.manual_active = True
        self.drive_current += DRIVE_GAIN

    def on_fwd_release(self):
        self.manual_active = False

    def on_bwd_press(self):
        self.manual_active = True
        self.drive_current -= DRIVE_GAIN

    def on_bwd_release(self):
        self.manual_active = False

    def step(self, theta, theta_dot, slide_vel, dt):
        # Buffer slide velocity
        self.drift_buffer.append(slide_vel)
        v_avg = sum(self.drift_buffer) / len(self.drift_buffer)

        # Automatic drift correction
        if not self.manual_active:
            self.drive_current = -v_avg * DRIFT_GAIN

        # Manual drive decay / overshoot bounce
        if self.drive_current != 0.0:
            dec = OVERSHOOT_RATE * dt
            if abs(self.drive_current) > dec:
                self.drive_current -= np.sign(self.drive_current) * dec
            else:
                self.drive_current = -np.sign(self.drive_current) * (dec - abs(self.drive_current))

        # PID control for pole
        u_pid = self.pid.update(theta, theta_dot, dt, self.u_smoothed, (-300000, 300000))
        u_target = u_pid + self.drive_current

        # Exponential smoothing
        self.u_smoothed += (dt / SMOOTH_TAU) * (u_target - self.u_smoothed)

        # Final command
        cmd = float(np.clip(self.u_smoothed, -np.inf, np.inf))
        return cmd, v_avg

--------------------------------------
